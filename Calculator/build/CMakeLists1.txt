cmake_minimum_required(VERSION 3.10.2)
project(jemu)

set(CMAKE_CXX_STANDARD 17)
include(GoogleTest)

set(BASE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/..")

if (UNIX AND NOT APPLE)
    message("Building on LINUX System")
    link_directories(${BASE_DIR}/3rd-party/capstone/libs/linux)
endif()

if (APPLE)
    message("Building on MAC System")
    link_directories(${BASE_DIR}/3rd-party/capstone/libs/mac)
endif()

###########
# openssl #
###########
if (APPLE)
    link_directories(${BASE_DIR}/3rd-party/openssl/lib/mac)
    set(SSL_INCLUDE_FILES  "${BASE_DIR}/3rd-party/openssl/include")
else()
    find_package(OpenSSL REQUIRED)
    set(SSL_INCLUDE_FILES  "${OPENSSL_INCLUDE_DIR}")
endif()

if(CMAKE_BUILD_TYPE MATCHES "Debug")
    add_definitions(-D_DEBUG)
endif()

# if(MEMDEBUG MATCHES "1")
#     add_definitions(-DMEMDEBUG)
# endif()

if (WIN32)
    message("Building on Windows System")
    if (CMAKE_GENERATOR MATCHES "MinGW Makefiles")
        add_definitions(-D_MINGW)
    endif()


    link_directories(${BASE_DIR}/3rd-party/capstone/libs/windows)
    add_definitions(-D_WINDOWS)
    add_definitions(-D_CRT_SECURE_NO_WARNINGS)
    add_definitions(-D_CRT_NONSTDC_NO_DEPRECATE)
    add_definitions(-D_SCL_SECURE_NO_WARNINGS)
    add_definitions(-D_WINSOCK_DEPRECATED_NO_WARNINGS)
    add_definitions(-D_SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING)

    # set (CMAKE_MINGW 1)
    if (CMAKE_MINGW MATCHES 1)
        add_definitions(-D_MINGW)
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -static-libgcc -static-libstdc++")
    else()
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP")
        set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MT")
    endif()
    # set_target_properties(${PROJECT_NAME} PROPERTIES LINK_FLAGS "/ignore:4099")
endif()

if (VERBOSE)
    add_definitions(-DVERBOSE)
endif()


###################
## jemu
###################
file(GLOB SRC_FILES
        "${BASE_DIR}/src/*.cpp"
        "${BASE_DIR}/src/core/*.cpp"
        "${BASE_DIR}/src/platforms/*.cpp"
        "${BASE_DIR}/3rd-party/*.cpp"
        "${BASE_DIR}/3rd-party/libelfin/elf/*.cc"
        "${BASE_DIR}/3rd-party/libelfin/dwarf/*.cc"
        "${BASE_DIR}/platforms/nrf52/src/*.cpp"
        "${BASE_DIR}/platforms/nrf52/gen/src/*.cpp"
        "${BASE_DIR}/platforms/nrf52/gen/sections/*.cpp"
        "${BASE_DIR}/platforms/stm32/src/*.cpp"
        "${BASE_DIR}/platforms/stm32f4/src/*.cpp"
        "${BASE_DIR}/platforms/stm32f4/gen/src/*.cpp"
        "${BASE_DIR}/platforms/stm32f4/gen/sections/*.cpp"
        "${BASE_DIR}/platforms/stm32l4/src/*.cpp"
        "${BASE_DIR}/platforms/stm32l4/gen/src/*.cpp"
        "${BASE_DIR}/platforms/stm32l4/gen/sections/*.cpp"
        "${BASE_DIR}/platforms/external/src/*.cpp"
        "${BASE_DIR}/platforms/external/gen/src/*.cpp"
        "${BASE_DIR}/platforms/cortex/cm4/src/*.cpp"
        "${BASE_DIR}/platforms/cortex/cm4/gen/src/*.cpp"
        )

set(INCLUDE_FILES
        ${BASE_DIR}/
        ${BASE_DIR}/src
        ${BASE_DIR}/include
        ${BASE_DIR}/include/ATWINC1500
        ${BASE_DIR}/include/peripherals
        ${BASE_DIR}/include/platforms
        ${BASE_DIR}/src/core
        ${BASE_DIR}/3rd-party
        ${BASE_DIR}/3rd-party/capstone/include
        ${BASE_DIR}/3rd-party/libelfin/elf
        ${BASE_DIR}/3rd-party/libelfin/dwarf
        ${BASE_DIR}/platforms/nrf52/include
        ${BASE_DIR}/platforms/nrf52/gen/include
        ${BASE_DIR}/platforms/stm32/include
        ${BASE_DIR}/platforms/stm32f4/include
        ${BASE_DIR}/platforms/stm32f4/gen/include
        ${BASE_DIR}/platforms/stm32l4/include
        ${BASE_DIR}/platforms/stm32l4/gen/include
        ${BASE_DIR}/platforms/external/include
        ${BASE_DIR}/platforms/external/gen/include
        ${BASE_DIR}/platforms/cortex/cm4/include
        ${BASE_DIR}/platforms/cortex/cm4/gen/include
        ${BASE_DIR}/../modeling-framework/include
        )

if (WIN32)
    list(APPEND SRC_FILES "${BASE_DIR}/3rd-party/libelfin/windows/mman/mman.c")
    list(APPEND INCLUDE_FILES ${BASE_DIR}/3rd-party/libelfin/windows/mman)
endif()

include_directories(${INCLUDE_FILES} ${SSL_INCLUDE_FILES})
add_library(jemu_lib ${SRC_FILES} ${INCLUDE_FILES} ${SSL_INCLUDE_FILES})

###################
##  END Jemu
###################


############
# TESTS ####
############
enable_testing()
# Download and unpack googletest at configure time

configure_file(CMakeLists.txt.in ${CMAKE_BINARY_DIR}/googletest-download/CMakeLists.txt)

execute_process(COMMAND ${CMAKE_COMMAND} -G "${CMAKE_GENERATOR}" .
        RESULT_VARIABLE result
        WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/googletest-download )
if(result)
    message(FATAL_ERROR "CMake step for googletest failed: ${result} ${CMAKE_BINARY_DIR}/googletest-download")
endif()

execute_process(COMMAND ${CMAKE_COMMAND} --build .
        RESULT_VARIABLE result
        WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/googletest-download )
if(result)
    message(FATAL_ERROR "Build step for googletest failed: ${result}")
endif()

# Prevent overriding the parent project's compiler/linker
# settings on Windows
set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)

# Add googletest directly to our build. This defines
# the gtest and gtest_main targets.
add_subdirectory(${CMAKE_BINARY_DIR}/googletest-src
        ${CMAKE_BINARY_DIR}/googletest-build
        EXCLUDE_FROM_ALL)

# The gtest/gtest_main targets carry header search path
# dependencies automatically when using CMake 2.8.11 or
# later. Otherwise we have to add them here ourselves.
if (CMAKE_VERSION VERSION_LESS 2.8.11)
    include_directories("${gtest_SOURCE_DIR}/include")
endif()

file(GLOB TEST_SRC_FILES
        "${BASE_DIR}/test/Test*.cpp"
        "${BASE_DIR}/../modeling-framework/src/*.cpp")

add_executable(tests "${TEST_SRC_FILES}")

if (APPLE)
    target_link_libraries(tests gtest_main gmock jemu_lib capstone ssl crypto)
else()
    target_link_libraries(tests gtest_main gmock jemu_lib capstone OpenSSL::SSL)
endif()

target_include_directories(tests PUBLIC
        ${BASE_DIR}/test/include
        ${gtest_SOURCE_DIR}/include
        ${gmock_SOURCE_DIR}/include
        )

gtest_discover_tests(tests)

# if (NOT WIN32)
#     add_custom_command(TARGET tests POST_BUILD
#         COMMAND ${BASE_DIR}/../modeling-framework/build/build.sh
#         COMMAND make -C ${BASE_DIR}/test/peripheral-v1)
# endif()

# if (WIN32)
#     add_custom_command(TARGET tests POST_BUILD
#         COMMAND ${BASE_DIR}/../modeling-framework/build/build.bat
#         COMMAND ${BASE_DIR}/test/peripheral-v1/build/build.bat)
# endif()

#################
## END TESTS ####
#################

add_executable(jemu "${BASE_DIR}/main.cpp")

if (APPLE)
    target_link_libraries(jemu jemu_lib capstone ssl crypto)
else()
    target_link_libraries(jemu jemu_lib capstone OpenSSL::SSL)
endif()

if (UNIX)
    set(JEMU_UNIX_CXX_FLAGS "-Werror -Wall -Wfatal-errors -Wno-shift-count-overflow -Weffc++ -Wno-non-virtual-dtor -Wno-strict-aliasing -Wno-unused-private-field")
    if (NOT APPLE)
        set(JEMU_UNIX_CXX_FLAGS "${JEMU_UNIX_CXX_FLAGS} -include ../3rd-party/force_link_glibc_2.24.h -static-libgcc -static-libstdc++ -pthread -rdynamic")
    endif()
    target_link_libraries (jemu dl m util)
    target_link_libraries (tests dl m util)
    set_target_properties(jemu_lib jemu PROPERTIES COMPILE_FLAGS ${JEMU_UNIX_CXX_FLAGS})
    set_target_properties(jemu_lib jemu PROPERTIES LINK_FLAGS ${JEMU_UNIX_CXX_FLAGS})
endif()

if (WIN32)
    # Removing the RTC option
    string(REPLACE "/RTC1" " " CMAKE_CXX_FLAGS_DEBUG ${CMAKE_CXX_FLAGS_DEBUG})
        
    if (CMAKE_GENERATOR MATCHES "MinGW Makefiles")
        set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -s")
    endif()
    target_link_libraries(jemu wsock32 ws2_32 psapi)
    target_link_libraries(tests wsock32 ws2_32 psapi)
endif()

if(CMAKE_BUILD_TYPE MATCHES "Debug" OR CMAKE_BUILD_TYPE MATCHES "Release")
    message("${CMAKE_BUILD_TYPE} mode")
else()
    message("Unknown mode ${CMAKE_BUILD_TYPE}")
endif()
