
NOTE: This exercise should be performed on a Windows XP SP3 machine without any additional updates installed.

1. Run the BuggyApplication.exe application. Choose '1' and input the string 'ABCD'.
   Make sure the input is correctly converted to lowercase.

2. Run the application again. Choose '1' and input the string 'ABCDEFABCDEFGH'. This time, the string is not converted correctly.

3. Use IDA, Ollydbg, WinDbg, or any other tools to reverse engineer the application's code and determine why it doesn't work for the second string you input.

4. Run the application with the following command-line:

	BuggyApplication.exe input1.txt

5. The application enters what appears to be an infinite loop -- it does not terminate after displaying the output. Your task is to determine why.

6. Run the application with the following command-line:

	BuggyApplication.exe input2.txt

7. The application displays an assertion dialog box. What is the source of this dialog box? What is the call stack that led to this assertion? Can you identify the code that causes this message?

8. Run the application with the following command-line:

	BuggyApplication.exe input3.txt

9. The application terminates, but it (a) does not convert the file contents to lower-case, and (b) displays an error message that seems theoretically impossible. Your task is to explain this output.

10. (OPTIONAL) Modify input1.txt, input2.txt, or input3.txt such that the application displays a message box with the caption "Hacked!" and the text "1337 hax0rz". You will probably need to call kernel32!LoadLibraryA to load user32.dll, and then use kernel32!GetProcAddress to retrieve the address of user32!MessageBoxA.

11. (OPTIONAL) Suppose that your text file were not allowed to contain NULL characters. How would you address this limitation to accomplish the same end result as in 10?

