0. Run the BatteryMeter.exe application from the Release folder.

1. Check the leak with Perfmon.

2. Attach WinDbg and use !heap 0 to see all heaps.

3. Let the application run and leak some more.

4. Use !heap 0 to see all heaps again, and see which heap grows.

5. (OPTIONAL) Use u kernel32!GetProcessHeap and analyze the disassembly of that method to see the handle of the process heap. Use u msvcr100!_get_heap_handle and analyze the disassembly of that method to see the handle of the CRT heap. Correlate with !heap 0 output and conclude which heap is leaking memory.

6. Close the application. Open a command prompt and navigate to the Debugging Tools for Windows directory.

7. gflags -i BatteryMeter.exe +ust

8. Run the application.

9. umdh -pn:BatteryMeter.exe -f:dump1.txt

10. Let the application run and leak some more.

11. umdh -pn:BatteryMeter.exe -f:dump2.txt

12. umdh dump1.txt dump2.txt -f:report.txt

13. gflags -i BatteryMeter.exe -ust

14. View the report and detect the leak source.

15. Run the application from the Debug folder and repeat the previous steps -- now you should have better insight as to the source of the leak (inspect the source code to make sure).

Reference:
http://support.microsoft.com/kb/268343

16. (OPTIONAL) Use Sysinternals VMMap to diagnose the same memory leak. In the VMMap initial window, launch the application from the "Launch and trace..." tab.

17. Allow the leak to accumulate, and then hit F5 (View-->Refresh).

18. In the middle summary window, click the "Heap" category.

19. In the bottom details window, click a heap segment that seems large or growing.

20. Click the "Heap Allocations" button at the bottom of the screen to view all allocations in that heap area. For each allocation you can click the "Stack" button to see the allocating call stack (you will need to configure symbols for that to work, in the Options-->Configure Symbols menu).

21. Feel free to experiment with the other buttons at the bottom of the screen.
