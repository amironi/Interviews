
NOTE: This exercise is applicable to a live debugging session as well as a crash dump. However, some of the initial analysis commands may work better off a dump than off a live process.

1. Run the ILikeToThrow.exe application with WinDbg attached. (Use Ctrl+E to choose the executable to debug.)

2. When the exception is thrown, look at the current address. It should be kernel32!RaiseException or something of the sort. Inspect the method's disassembly to see where the exception parameter is stored. Typically, it's pushed onto the stack and stored in EAX prior to that.
(You might need to ask the instructor for help here.)
ALTERNATIVE: Use the .exr -1 command. It may or may not work, depending on whether you captured a crash dump and what kind of dump it is.
ALTERNATIVE: Look for the parameters to except_handler2 or CxxThrowException on the stack.

3. Pass the exception address obtained in the previous step to the .exr command. It should display an exception record similar to the following:

0:000> .exr 003ff72c 
ExceptionAddress: 76dfb727 (KERNELBASE!RaiseException+0x00000058)
   ExceptionCode: e06d7363 (C++ EH exception)
  ExceptionFlags: 00000001
NumberParameters: 3
   Parameter[0]: 19930520
   Parameter[1]: 003ff7c4
   Parameter[2]: 00082398
  pExceptionObject: 003ff7c4
  _s_ThrowInfo    : 00082398
  Type            : class my_elaborate_exception
  Type            : class std::exception

4. Pass the address of the exception object (parameter 1) to the db command. See if you can reason the exception message from the output.

(The following part is OPTIONAL)
If you didn't have symbols or were using a partial dump, you might have had to recover the name of the exception class manually. Here is how to do so.

5. Inspect the four DWORDs starting at the Parameter[2] address using the dd command.

6. Pass the fourth DWORD from the previous command's output to the dd command.

7. Pass the second DWORD of the previous command's output to the dd command.

8. Add 0x8 to the second DWORD of the previous command's output and pass the resulting address to the da command. This should give you the name of the exception class, after C++ name mangling. For example:

0:000> .exr 001cf744 
ExceptionAddress: 76dfb727 (KERNELBASE!RaiseException+0x00000058)
   ExceptionCode: e06d7363 (C++ EH exception)
  ExceptionFlags: 00000001
NumberParameters: 3
   Parameter[0]: 19930520
   Parameter[1]: 001cf7dc
   Parameter[2]: 011f2398
  pExceptionObject: 001cf7dc
  _s_ThrowInfo    : 011f2398
  Type            : class my_elaborate_exception
  Type            : class std::exception

0:000> dd 011f2398 L4
011f2398  00000000 011f1040 00000000 011f238c

0:000> dd 011f238c L2
011f238c  00000002 011f2354

0:000> dd 011f2354 L2
011f2354  00000000 011f3038

0:000> da 011f3038+8
011f3040  ".?AVmy_elaborate_exception@@"

(Note: on 64-bit platforms the process is slightly different. See http://blogs.msdn.com/b/oldnewthing/archive/2010/07/30/10044061.aspx for more details.)